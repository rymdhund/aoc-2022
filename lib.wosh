##################
# Char functions #
##################

fn is_alpha(c) {
  n = ord(c)
  (n >= ord("a") && n <= ord("z")) || (n >= ord("A") && n <= ord("Z"))
}

assert(is_alpha("a") && !is_alpha(" "), "is_alpha")

#################
# Int functions #
#################

fn abs(i) {
  if i < 0 {
    -i
  } else {
    i
  }
}

##################
# List functions #
##################
fn (lst: List) eq(lst2) {
  if len(lst) != len(lst2) {
    return false
  }

  i = 0
  for i < len(lst) {
    if lst[i] != lst2[i] {
      return false
    }
    i = i + 1
  }
  return true
}

fn (lst: List) get(idx) {
  lst[idx]
}

fn (lst: List) reverse() {
  res = []
  i = 0
  for i < len(lst) {
    res = lst[i] :: res
    i = i + 1
  }
  res
}

assert([1, 2, 3].reverse() == [3, 2, 1], "reverse")

fn (lst: List) map(f) {
  res = []
  i = 0
  for i < len(lst) {
    res = f(lst[i]) :: res
    i = i + 1
  }
  res.reverse()
}

assert([1, 2, 3].map((n) => n + 1) == [2, 3, 4], "map")

fn (lst: List) flatmap(f) {
  res = []
  i = 0
  for i < len(lst) {
    j = 0
    xs = f(lst[i])
    for j < len(xs) {
      res = xs[j] :: res
      j = j + 1
    }
    i = i + 1
  }
  res.reverse()
}

assert([1, 2, 3].flatmap((n) => [n, n]) == [1, 1, 2, 2, 3, 3], "flatmap")

fn (lst: List) filter(f) {
  res = []
  i = 0
  for i < len(lst) {
    if f(lst[i]) {
      res = lst[i] :: res
    }
    i = i + 1
  }
  res.reverse()
}

fn (lst: List) foreach(f) {
  i = 0
  for i < len(lst) {
    f(lst[i])
    i = i + 1
  }
}

assert(["a", "b", "3"].filter(is_alpha) == ["a", "b"], "filter")

fn sort(lst) {
  if len(lst) == 0 || len(lst) == 1 {
    lst
  } else {
    pivot = lst[0]
    rest = lst[1:]
    a = []
    b = []
    i = 1
    for i < len(lst) {
      if lst[i] <= pivot {
        a = lst[i] :: a
      } else {
        b = lst[i] :: b
      }
      i = i + 1
    }
    sort(a) + [pivot] + sort(b)
  }
}

assert(sort([3, 2, 4, 2]) == [2, 2, 3, 4], "sort")

fn (lst: List) uniq() {
  if len(lst) == 0 {
    []
  } else {
    res = [lst[0]]
    i = 1
    for i < len(lst) {
      item = lst[i]
      if item != res[0] {
        res = item :: res
      }
      i = i + 1
    }
    res.reverse()
  }
}

assert([1, 1, 2, 2, 3, 3].uniq() == [1, 2, 3], "uniq")

fn (lst: List) sum() {
  s = 0
  i = 0
  for i < len(lst) {
    s = s + lst[i]
    i = i + 1
  }
  s
}

fn (lst: List) min() {
  m = lst[0]
  i = 1
  for i < len(lst) {
    if lst[i] < m {
      m = lst[i]
    }
    i = i + 1
  }
  m
}

fn (lst: List) max() {
  m = lst[0]
  i = 1
  for i < len(lst) {
    if lst[i] > m {
      m = lst[i]
    }
    i = i + 1
  }
  m
}

assert([1, 3, 2].max() == 3, "max")
assert([5, 3, 2, 4].min() == 2, "min")


fn (lst: List) contains(elem) {
  res = false
  i = 0
  for i < len(lst) {
    if lst[i] == elem {
      return true
    }
    i = i + 1
  }
  res
}

fn (lst: List) intersect(lst2) {
  if len(lst) == 0  || len(lst2) == 0 {
    []
  } else {
    res = []
    i = 0
    for i < len(lst) {
      if lst2.contains(lst[i]) {
        res = lst[i] :: res
      }
      i = i + 1
    }
    res
  }
}

assert(sort([1, 2, 3].intersect([2, 3, 4])) == [2, 3], "intersect")

fn (lst: List) head() {
  lst[0]
}

assert([1, 2, 3].head() == 1, "head")

# Partition a list is size of size
fn (lst: List) partition(size) {
  ret = []
  i = 0
  p = []
  for i < len(lst) {
    p = lst[i] :: p
    if len(p) == size {
      ret = ret + [p.reverse()]
      p = []
    }
    i = i + 1
  }
  if len(p) > 0 {
    ret = ret + [p.reverse()]
  }
  return ret
}

assert([1, 2, 3, 4, 5, 6, 7].partition(3) == [[1, 2, 3], [4, 5, 6], [7]], "partition")

# split list on entry
fn (lst: List) split(sep) {
  if len(lst) == 0 {
    []
  } else {
    res = []
    cur = 0
    i = 0
    for i < len(lst) {
      if lst[i] == sep {
        res = lst[cur:i] :: res
        cur = i+1
      }
      i = i + 1
    }
    res = lst[cur:i] :: res
  }
  res.reverse()
}

assert([1,2,3,4,2].split(2) == [[1], [3, 4],[]], "list split")

fn range(from, to) {
  r = []
  i = to - 1
  for i >= from {
    r = i :: r
    i = i - 1
  }
  r
}

assert(range(1, 4) == [1, 2, 3], "range")

####################
# String functions #
####################

fn (s: Str) split(sep: Str) {
  if len(s) == 0 {
    []
  } else {
    res = []
    cur = 0
    i = 0
    for i < len(s) {
      if s[i] == sep {
        res = s[cur:i] :: res
        cur = i+1
      }
      i = i + 1
    }
    res = s[cur:i] :: res
  }
  res.reverse()
}

assert("a,b".split(",") == ["a", "b"], "split")

fn (s: Str) join(strings) {
  if len(strings) == 0 {
    ""
  } else {
    res = strings[0]
    i = 1
    for i < len(strings) {
      res = res + s + strings[i]
      i = i + 1
    }
    res
  }
}

assert(",".join(["a", "b", "c"]) == "a,b,c", "join")

fn (s: Str) to_list() {
  res = []
  i = 0
  for i < len(s) {
    res = s[i] :: res
    i = i + 1
  }
  res.reverse()
}

fn (s: Str) startswith(prefix) {
  s[:len(prefix)] == prefix
}

assert("abc".startswith("ab"), "startswith 1")
assert(!"abc".startswith("b"), "startswith 2")
assert(!"abc".startswith("abde"), "startswith 3")


#################
# Map functions #
#################

fn (m: Map) values() {
  items(m).map((pair) => pair[1])
}

fn (m: Map) keys() {
  items(m).map((pair) => pair[0])
}

######################
# Iterator functions #
######################

# Hack to implement Iterator before we have newtype

fn (iter: Map) next() {
  i = iter["i"] + 1
  iter["i"] = i
  i < len(iter["lst"])
}

fn (iter: Map) val() {
  iter["lst"][iter["i"]]
}

fn (iter: Map) idx() {
  iter["i"]
}

fn (lst: List) iter() {
  {"i": -1, "lst": lst}
}

fn (m: Map) iter() {
  {"i": -1, "lst": items(m)}
}

fn test_iter() {
  it = [1, 2].iter()
  assert(it.next(), "iter 1 next")
  assert(it.val() == 1, "iter 1 val")
  assert(it.idx() == 0, "iter 1 idx")

  assert(it.next(), "iter 2 next")
  assert(it.val() == 2, "iter 2 val")
  assert(it.idx() == 1, "iter 2 idx")

  assert(!it.next(), "iter 3")

  it = {"x": 1}.iter()
  assert(it.next(), "itermap 1 next")
  assert(it.val()[0] == "x", "itermap 1 val")
  assert(it.val()[1] == 1, "itermap 1 val")
  assert(it.idx() == 0, "itermap 1 idx")
  assert(!it.next(), "itermap")
}
test_iter()


#################
# Set functions #
#################

type Set(m: Map)

fn (s: Set) add(item) {
  s.m[str(item)] = true
}

fn (s: Set) rm(item) {
  key = str(item)
  if s.m[key] != () {
    s.m[key] = false
  }
}

fn (s: Set) contains(item) {
  return s.m[str(item)] == true
}

fn (s: Set) len() {
  len(s.m.values().filter((v) => v))
}

fn new_set(lst: List) {
  s = Set({})
  lst.foreach((it) => s.add(it))
  s
}

fn test_set() {
  s = new_set([1, 2])

  assert(s.contains(1), "set 1")
  assert(!s.contains(3), "set 2")

  s.add(3)
  assert(s.contains(3), "set 3")
  assert(s.len() == 3, "set 4")

  s.rm(2)
  s.rm(3)
  assert(!s.contains(3), "set 5")
  assert(s.len() == 1, "set 6")
}
test_set()
