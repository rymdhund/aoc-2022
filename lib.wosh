##################
# Char functions #
##################

fn is_alpha(c) {
  n = ord(c)
  (n >= ord("a") && n <= ord("z")) || (n >= ord("A") && n <= ord("Z"))
}

assert(is_alpha("a") && !is_alpha(" "), "is_alpha")

##################
# List functions #
##################
fn (lst: List) eq(lst2) {
  if len(lst) != len(lst2) {
    return false
  }

  i = 0
  for i < len(lst) {
    if lst[i] != lst2[i] {
      return false
    }
    i = i + 1
  }
  return true
}

fn (lst: List) reverse() {
  res = []
  i = 0
  for i < len(lst) {
    res = lst[i] :: res
    i = i + 1
  }
  res
}

assert([1, 2, 3].reverse() == [3, 2, 1], "reverse")

fn (lst: List) map(f) {
  res = []
  i = 0
  for i < len(lst) {
    res = f(lst[i]) :: res
    i = i + 1
  }
  res.reverse()
}

fn add_1(n) { n + 1 }

assert([1, 2, 3].map(add_1) == [2, 3, 4], "map")

fn (lst: List) filter(f) {
  res = []
  i = 0
  for i < len(lst) {
    if f(lst[i]) {
      res = lst[i] :: res
    }
    i = i + 1
  }
  res.reverse()
}

assert(["a", "b", "3"].filter(is_alpha) == ["a", "b"], "filter")

fn (lst: List) max() {
  mx = lst[0]
  i = 0
  for i < len(lst) {
    if lst[i] > mx {
      mx = lst[i]
    }
    i = i + 1
  }
  mx
}

assert([1, 3, 2].max() == 3, "max")

fn sort(lst) {
  if len(lst) == 0 || len(lst) == 1 {
    lst
  } else {
    pivot = lst[0]
    rest = lst[1:]
    a = []
    b = []
    i = 1
    for i < len(lst) {
      if lst[i] <= pivot {
        a = lst[i] :: a
      } else {
        b = lst[i] :: b
      }
      i = i + 1
    }
    sort(a) + [pivot] + sort(b)
  }
}

assert(sort([3, 2, 4, 2]) == [2, 2, 3, 4], "sort")

fn (lst: List) uniq() {
  if len(lst) == 0 {
    []
  } else {
    res = [lst[0]]
    i = 1
    for i < len(lst) {
      item = lst[i]
      if item != res[0] {
        res = item :: res
      }
      i = i + 1
    }
    res.reverse()
  }
}

assert([1, 1, 2, 2, 3, 3].uniq() == [1, 2, 3], "uniq")

fn (lst: List) sum() {
  s = 0
  i = 0
  for i < len(lst) {
    s = s + lst[i]
    i = i + 1
  }
  s
}

fn (lst: List) contains(elem) {
  res = false
  i = 0
  for i < len(lst) {
    if lst[i] == elem {
      return true
    }
    i = i + 1
  }
  res
}

fn (lst: List) intersect(lst2) {
  if len(lst) == 0  || len(lst2) == 0 {
    []
  } else {
    res = []
    i = 0
    for i < len(lst) {
      if lst2.contains(lst[i]) {
        res = lst[i] :: res
      }
      i = i + 1
    }
    res
  }
}

assert(sort([1, 2, 3].intersect([2, 3, 4])) == [2, 3], "intersect")

fn (lst: List) head() {
  lst[0]
}

assert([1, 2, 3].head() == 1, "head")

# Partition a list is size of size
fn (lst: List) partition(size) {
  ret = []
  i = 0
  p = []
  for i < len(lst) {
    p = lst[i] :: p
    if len(p) == size {
      ret = ret + [p.reverse()]
      p = []
    }
    i = i + 1
  }
  if len(p) > 0 {
    ret = ret + [p.reverse()]
  }
  return ret
}

assert([1, 2, 3, 4, 5, 6, 7].partition(3) == [[1, 2, 3], [4, 5, 6], [7]], "partition")

####################
# String functions #
####################

fn (s: Str) split(sep: Str) {
  if len(s) == 0 {
    []
  } else {
    res = []
    cur = 0
    i = 0
    for i < len(s) {
      if s[i] == sep {
        res = s[cur:i] :: res
        cur = i+1
      }
      i = i + 1
    }
    res = s[cur:i] :: res
  }
  res.reverse()
}

assert("a,b".split(",") == ["a", "b"], "split")

fn (s: Str) join(strings) {
  if len(strings) == 0 {
    ""
  } else {
    res = strings[0]
    i = 1
    for i < len(strings) {
      res = res + s + strings[i]
      i = i + 1
    }
    res
  }
}

assert(",".join(["a", "b", "c"]) == "a,b,c", "join")

fn (s: Str) to_list() {
  res = []
  i = 0
  for i < len(s) {
    res = s[i] :: res
    i = i + 1
  }
  res.reverse()
}
