fn cals(lines) {
  i = 0
  tot = 0
  for i < len(lines) {
    if len(lines[i]) == 0 || i == len(lines[i]) - 1 {
      do yield(tot)
      tot = 0
    } else {
      y = atoi(lines[i])
      tot = tot + y
    }
    i = i + 1
  }
}

fn solve1(lines) {
  max = 0
  tot = 0
  i = 0
  try {
    cals(lines)
  } handle {
    yield(v) @ k -> {
      if v > max {
        max = v
      }
      resume k
    }
  }
  max
}

fn sort(lst) {
  if len(lst) == 0 || len(lst) == 1 {
    lst
  } else {
    pivot = lst[0]
    rest = lst[1:]
    a = []
    b = []
    i = 1
    for i < len(lst) {
      if lst[i] <= pivot {
        a = lst[i] :: a
      } else {
        b = lst[i] :: b
      }
      i = i + 1
    }
    sort(a) + [pivot] + sort(b)
  }
}


fn solve2(lines) {
  max = [0, 0, 0]
  try {
    cals(lines)
  } handle {
    yield(v) @ k -> {
      if v > max[0] {
        max = v :: max[1:]
        max = sort(max)
      }
      resume k
    }
  }
  max[0] + max[1] + max[2]
}

lines = readlines("inputs/day1.txt")
println(solve1(lines))
println(solve2(lines))
