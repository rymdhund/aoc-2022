type Coord(x: Int, y: Int)

fn parse_dir(dir) {
  if dir == "R" {
    Coord(1, 0)
  } else if dir == "L" {
    Coord(-1, 0)
  } else if dir == "U" {
    Coord(0, 1)
  } else if dir == "D" {
    Coord(0, -1)
  } else {
    assert(false, "should not happen")
  }
}

fn (c: Coord) sub(c2) {
  Coord(c.x - c2.x, c.y - c2.y)
}

fn (c: Coord) add(c2) {
  Coord(c.x + c2.x, c.y + c2.y)
}

fn (c: Coord) str() {
  str(c.x) + ", " + str(c.y)
}

fn (c: Coord) eq(c2) {
  c.x == c2.x && c.y == c2.y
}

fn (c: Coord) neigh4() {
  [
    Coord(c.x+1, c.y),
    Coord(c.x, c.y+1),
    Coord(c.x-1, c.y),
    Coord(c.x, c.y-1)
  ]
}

fn (c: Coord) within(x, width, y, height) {
  c.x >= x && c.x < (x+width) && c.y >= y && c.y < (y+height)
}

fn (c: Coord) lookup(area) {
  area[c.y][c.x]
}
